apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xonboardingclaims.demo.platform.bank.com
spec:
  writeConnectionSecretsToNamespace: crossplane-config
  compositeTypeRef:
    apiVersion: demo.platform.bank.com/v1alpha1
    kind: XOnboardingClaim
  mode: Pipeline
  pipeline:
  - step: environment-config
    functionRef:
      name: function-environment-config
    input:
      apiVersion: environmentconfigs.fn.crossplane.io/v1beta1
      kind: Input
      spec:
        environmentConfigs:
        - type: Reference
          ref:
            name: global-environment-variables
  - step: kcl
    functionRef:
      name: function-kcl
    input:
      apiVersion: krm.kcl.dev/v1alpha1
      kind: KCLRun
      metadata:
        name: provision argoproj resources
      spec:
        target: Default
        source: |-
          import argoproj.v1alpha1 as argocdv1alpha1


          oxr = option("params").oxr
          dxr = option("params").dxr
          _name = "-".join(oxr.metadata.name.split("-")[:-1])
          claim_name = oxr?.spec?.claimRef?.name
          _spec = oxr.spec

          _addonsMap = {
              "dayzero" = "demo.platform.bank.com/dayzero-config-enabled"
          }


          git_url_base = "https://github.com/Davitron/"

          helm_chart_git_repo = git_url_base+"simple-generic-helm-chart.git"
          application_repo = git_url_base+claim_name+".git"

          generateAnnotations = lambda addons {
            {
              _addonsMap[addon] = "true" for addon, enabled in addons if enabled and _addonsMap[addon]
            }
          }


          project = argocdv1alpha1.AppProject{
            metadata = {
              name = claim_name

              namespace = "argocd",
              finalizers = ["resources-finalizer.argocd.argoproj.io"]
            },
            spec = {
              description = oxr.spec.description,
              sourceRepos = ["*"],
              destinations = [
                {
                  name = "*",
                  namespace = "*"
                }
              ],
              clusterResourceWhitelist = [
                {
                  group = "*",
                  kind = "*"
                }
              ],
              roles = []
            }
          }


          applicationset = argocdv1alpha1.ApplicationSet{
            apiVersion = "argoproj.io/v1alpha1",
            kind = "ApplicationSet",
            metadata = {
              name = claim_name,
              namespace = "argocd",
              finalizers = ["resources-finalizer.argocd.argoproj.io"]
            },
            spec = {
              goTemplate = True,
              generators = [
                {
                  clusters  = {}
                }
              ],
              template = {
                metadata = {
                  name = claim_name + "-{{ .name }}",
                  annotations = {
                    "argocd.argoproj.io/sync-options" = "SkipDryRunOnMissingResource=true"
                  }
                },
                spec = {
                  project = claim_name,
                  sources = [
                    {
                      repoURL = application_repo,
                      targetRevision = "HEAD",
                      ref = "values"
                    },
                    {
                      repoURL = helm_chart_git_repo,
                      targetRevision = "HEAD",
                      path = "./charts",
                      helm = {
                        valueFiles = [
                          "$values/{{ if eq .name \"in-cluster\" }}.platform/mgnt.yaml{{ else }}.platform/{{ .metadata.labels.env }}.yaml{{ end }}"
                        ]
                      }
                    }
                  ],
                  destination = {
                    server = "{{ .server }}",
                    namespace = claim_name
                  },
                  syncPolicy = {
                    managedNamespaceMetadata = {
                      labels = {
                        "argocd.argoproj.io/instance" = claim_name
                      }
                      annotations = {
                        "argocd.argoproj.io/tracking-id": "${claim_name}-{{ .name }}:/Namespace:${claim_name}/${claim_name}",
                        **generateAnnotations(_spec.addons)
                      }
                    },
                    automated = {
                      prune = True,
                      selfHeal = True
                    },
                    syncOptions = [
                      "CreateNamespace=true",
                      "PrunePropagationPolicy=foreground",
                      "PruneLast=true",
                      "RespectIgnoreDifferences=true",
                      "ApplyOutOfSyncOnly=true",
                      "ServerSideApply=true"
                    ],
                    retry = {
                      limit = 5,
                      backoff = {
                        duration = "5s",
                        maxDuration = "1m",
                        factor = 2
                      }
                    }
                  }
                }
              }
            }
          }

          project_object = {
            apiVersion = "kubernetes.crossplane.io/v1alpha2"
            kind = "Object"
            metadata = {
              name = claim_name + "-project"
              annotations = {
                "crossplane.io/external-name" = claim_name
                "krm.kcl.dev/composition-resource-name" = "project"
              }
            }
            spec = {
              managementPolicies = ["Observe", "Create", "Update", "Delete"]
              forProvider = {
                manifest = project
              }
              providerConfigRef = {
                name = "provider-kubernetes"
              }
            }
          }


          applicationset_object = {
            apiVersion = "kubernetes.crossplane.io/v1alpha2"
            kind = "Object"
            metadata = {
              name = claim_name + "-applicationset"
              annotations = {
                "crossplane.io/external-name" = claim_name
                "krm.kcl.dev/composition-resource-name" = "applicationset"
              }
            }
            spec = {
              managementPolicies = ["Observe", "Create", "Update", "Delete"]
              forProvider = {
                manifest = applicationset
              }
              providerConfigRef = {
                name = "provider-kubernetes"
              }
            }
          }

          items = [
            project_object,
            applicationset_object
          ]
        dependencies: argoproj = "0.2.1"
  - step: automatically-detect-ready-composed-resources
    functionRef:
      name: function-auto-ready
